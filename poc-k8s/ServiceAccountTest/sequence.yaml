apiVersion: v1
kind: Namespace
metadata:
  name: poc
---
apiVersion: v1
kind: ServiceAccount
metadata:
  namespace: poc
  name: poc-account
secrets:
- name: poc-token
---
apiVersion: v1
kind: Secret
metadata:
  name: poc-token
  namespace: poc
  annotations:
    kubernetes.io/service-account.name: poc-account
type: kubernetes.io/service-account-token
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: poc
  name: poc-auth
rules:
- apiGroups: ["", "apps"]
  resources: ["services", "deployments"]
  verbs: ["get","list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: poc-auth-binding
  namespace: poc
subjects:
- kind: ServiceAccount
  name: poc-account
  namespace: poc
roleRef:
  kind: Role
  name: poc-auth
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: Service
metadata:
  namespace: poc
  name: api-server
spec:
  ports:
    - name: web-port
      port: 80
      targetPort: 8080
  selector:
    app: api-server
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  namespace: poc
  name: api-server
spec:
  ports:
    - name: web-port
      port: 80
      targetPort: 8080
  selector:
    app: api-server
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  namespace: poc
  name: inference-server
spec:
  ports:
    - name: flask-port
      port: 5000
      targetPort: 5000
  selector:
    app: inference-server
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: poc
  name: deployment-inference-server
spec:
  replicas: 3
  selector:
    matchLabels:
      app: inference-server
  template:
    metadata:
      name: poc-infer
      labels:
        app: inference-server
    spec:
      containers:
      - name: my-poc-infer
        image: poc-infer:0.1
        ports:
        - containerPort: 5000
          name: flask-port
